input {
    relp {
        port => 5142
        type => 'rsyslogrelp'
        debug => true
    }
}

filter {
    if [type] == "rsyslogrelp" {
        syslog_pri { }
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match   => [ 'message', '%{RSYSLOGRELPMESSAGE}' ]
            overwrite => [ "message" ]
        }
    }

    # silence spammy snmpd
    if [program] == 'snmpd' and [message] =~ '^error on subcontainer' {
        drop {}
    }

    # fix non fqdns
    if [loghost] == "nue1d0" or [loghost] == "nue1" {
       mutate { replace => [ "loghost", "%{loghost}.datavibe.net" ] }
    }
    if [loghost] == "eeqj" {
       mutate { replace => [ "loghost", "%{loghost}.com" ] }
    }
    if [loghost] == "admin" {
       mutate { replace => [ "loghost", "%{loghost}.eeqj.de" ] }
    }

    if [program] == 'sshd' {
    grok {
            patterns_dir => "/etc/logstash/patterns"
            match => [ 'message', 'from %{IP:remoteip} port' ]
            tag_on_failure => []
    }
    }

    if [program] =~ 'dovecot' {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => [ 'message', 'rip=%{IP:remoteip}' ]
            tag_on_failure => []
        }
    }


    if [program] =~ '^postfix\/' {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => [ 'message', '%{POSTFIXQID} %{GREEDYDATA:message}' ]
            overwrite => [ "message" ]
            tag_on_failure => []
        }
    }

    if [program] == 'postfix/smtpd' {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => [
                'message',
                '(?<postfix_event>connect|disconnect) from %{POSTFIXHOST}'
            ]
            add_field => [ 'event', 'postfix_smtpd_%{postfix_event}' ]
            remove_field => 'postfix_event'
            tag_on_failure => []
        }
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => ['message', '^reject: %{WORD} from %{POSTFIXHOST}:' ]
            tag_on_failure => []
        }
 
    }

    if [remoteip] != '' {
        geoip {
            source => 'remoteip'
        }
    }
}

output {
    file {
        codec           => json
        flush_interval  => 0
        path => "/var/log/%{+YYYYMM}/%{+YYYYMMdd}.%{loghost}.json"
    }

    http {
        http_method     => 'post'
        url     => 'http://127.0.0.1:4151/put?topic=syslogs'
    }
}
